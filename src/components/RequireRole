"use client";

import { useEffect, useState, type ReactNode } from "react";
import { useRouter, usePathname, useSearchParams } from "next/navigation";
import { supabase } from "@/lib/supabaseClient";
import type { AppRole } from "@/lib/roles";

type Props = {
  /** אם לא שולחים allow — כל משתמש מחובר עובר */
  allow?: (role: AppRole | null) => boolean;
  children: ReactNode;
  fallback?: ReactNode;
};

export default function RequireRole({ allow, children, fallback }: Props) {
  const router = useRouter();
  const pathname = usePathname();
  const search = useSearchParams();

  const [role, setRole] = useState<AppRole | null>(null); // ✅ מאפשר null
  const [checking, setChecking] = useState(true);

  useEffect(() => {
    (async () => {
      try {
        // חייבים להיות מחוברים
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
          const next = pathname + (search?.toString() ? `?${search.toString()}` : "");
          const url = new URL("/login", window.location.origin);
          url.searchParams.set("next", next);
          router.replace(url.toString());
          return;
        }

        // קבלת התפקיד (החלף ל-select מהטבלה אם אין לך RPC כזה)
        const { data, error } = await supabase.rpc("get_my_role");
        if (error) {
          console.error("get_my_role error:", error.message);
          setRole(null);
        } else {
          setRole((data as AppRole) ?? null);
        }
      } finally {
        setChecking(false);
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [router, pathname, search]);

  if (checking) return <div style={{ padding: 20, direction: "rtl" }}>טוען…</div>;

  // אם לא הועברה allow — מספיק שיש משתמש (role !== null)
  const isAllowed = allow ? allow(role) : role !== null;

  if (!isAllowed) {
    return fallback ?? <div style={{ padding: 20, direction: "rtl" }}>🚫 אין לך הרשאה</div>;
  }

  return <>{children}</>;
}